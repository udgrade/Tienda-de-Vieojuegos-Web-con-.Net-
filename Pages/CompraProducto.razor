@page "/Compra/{IdProducto:int}"
@using OnlineBlazorApp.Data.Model
@using OnlineBlazorApp.Data.Service
@using OnlineBlazorApp.Data.PDF

@using System.IO

@inject IProductoService ProductoService
@inject IFacturaService FacturaService
@inject IUsuarioService UsuarioService
@inject IFacturaPDF FacturaPDF
@inject NavigationManager NavigationManager

@inject Blazored.SessionStorage.ISessionStorageService sessionCarrito

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.1/css/all.css" integrity="sha384-gfdkjb5BdAXd+lj+gudLWI+BXq4IuLW5IT+brZEZsLFm++aCMlF1V92rMkPaX4PP" crossorigin="anonymous">
    <style>
        :root {
            --color-inactivo: #5f5050;
            --color-hover: #ffa400;
        }

        .valoracion {
            display: flex;
            flex-direction: row-reverse;
        }

            .valoracion button {
                background-color: initial;
                border: 0;
                color: var(--color-inactivo);
                transition: 1s all;
            }

                .valoracion button:hover {
                    cursor: pointer;
                    color: var(--color-hover);
                    transform: rotate(360deg);
                }

        button:nth-child(1):hover ~ button {
            color: var(--color-hover);
            transform: rotate(360deg);
        }

        button:nth-child(2):hover ~ button {
            color: var(--color-hover);
            transform: rotate(360deg);
        }

        button:nth-child(3):hover ~ button {
            color: var(--color-hover);
            transform: rotate(360deg);
        }

        button:nth-child(4):hover ~ button {
            color: var(--color-hover);
            transform: rotate(360deg);
        }

        button:nth-child(5):hover ~ button {
            color: var(--color-hover);
            transform: rotate(360deg);
        }
    </style>
</head>




<tbody>
    <div class="Fondo_Principal">
        <div class="Fondo_Principal">

            <div class="Fondo_Primario">

                <!--TITULO DESTACADOS-->
                <h1 class="Destacados">Producto @productos.Codi_Prod</h1>

            </div>
            <div class="Fondo_Secundario">

                <!--Tarjeta que contiene el juego-->

                @if (productos.Descuent_Prod > 0)
                {

                    <div class="tarjeta_portada">
                        <!--TITULO DEL JUEGO-->
                        <div class="title_portada">
                            @productos.Name_Prod
                        </div>
                        <!--CARATULA DEL JUEGO-->

                        <div>
                            <img class="img_portada" src="@productos.Imgn_Prod" />
                        </div>

                        <!--Descripcion Producto-->
                        <!--PRECIO DEL JUEGO-->
                        <div class="precio_portada">
                            <p>Cop: $@productos.Descuent_Prod</p>
                        </div>

                    </div>

                    <!--Descripcion Producto-->

                    <div class="Descripcion">

                        <p>@productos.Desp_Prod</p>

                    </div>

                    <!--Botones Compra/Reclamo-->

                    <div class="Boton_Compra">

                        <button @onclick="()=> GenerarFactura()">Comprar</button>

                    </div>

                    <div class="Boton_Compra">

                        <button>Reclamo</button>

                    </div>

                }
                else
                {

                    <div class="tarjeta_portada">
                        <!--TITULO DEL JUEGO-->
                        <div class="title_portada">
                            @productos.Name_Prod
                        </div>
                        <!--CARATULA DEL JUEGO-->

                        <div>
                            <img class="img_portada" src="@productos.Imgn_Prod" />
                        </div>

                        <!--Descripcion Producto-->
                        <!--PRECIO DEL JUEGO-->
                        <div class="precio_portada">
                            <p>Cop: $@productos.Pric_Prod</p>
                        </div>

                    </div>

                    <!--Descripcion Producto-->

                    <div class="Descripcion">

                        <p>@productos.Desp_Prod</p>

                    </div>

                    <!--Botones Compra/Reclamo-->

                    <div class="Boton_Compra">

                        <button @onclick="()=> GenerarFactura()">Comprar</button>

                    </div>

                    <div class="Boton_Compra">

                        <button>Reclamo</button>

                    </div>

                }

            </div>

        </div>
    </div>
</tbody>





@code {

    Productos productos = new Productos();
    Factura factura = null;

    public string codeusuario = "";


    [Parameter]
    public int IdProducto { get; set; }

    int codigo;

    protected override async Task OnInitializedAsync()
    {
        if (IdProducto > 0)
        {
            productos = await ProductoService.ProductoSelect(IdProducto);
        }

        if (httpContextAccessor.HttpContext.User.Identity.Name != null)
        {
            codeusuario = httpContextAccessor.HttpContext.User.Identity.Name;
        }
        else
        {
            codeusuario = "";
        }

    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string _authMessage;

    private async Task LogUsername()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }

    public async Task GenerarFactura()
    {

        Usuario usuario = new Usuario();
        usuario = await UsuarioService.UsuarioSelect(codeusuario);

        factura = new Factura();
        factura.Codi_UserUsuarios = usuario.Id;
        factura.Codi_ProdProductos = IdProducto;
        factura.Fech_Fact = DateTime.Now;
        factura.Prec_Fact = productos.Pric_Prod;

        await FacturaService.FacturaInsert(factura);

        await FacturaPDF.GeneraFactura(factura, usuario, productos);


    }


}
